# DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/store/re_types/definitions/rerun/datatypes/video.fbs".

# You can extend this class by creating a "VideoSegmentExt" class in "video_segment_ext.py".

from __future__ import annotations

from typing import Any, Sequence, Union

import pyarrow as pa
from attrs import define, field

from .. import datatypes
from .._baseclasses import (
    BaseBatch,
    BaseExtensionType,
)

__all__ = ["VideoSegment", "VideoSegmentArrayLike", "VideoSegmentBatch", "VideoSegmentLike", "VideoSegmentType"]


def _video_segment__timestamp__special_field_converter_override(x: datatypes.UInt64Like) -> datatypes.UInt64:
    if isinstance(x, datatypes.UInt64):
        return x
    else:
        return datatypes.UInt64(x)


@define(init=False)
class VideoSegment:
    """**Datatype**: A segment of video made up of one or more samples, always starts with a key frame."""

    def __init__(self: Any, timestamp: datatypes.UInt64Like, samples: datatypes.VideoSampleArrayLike):
        """
        Create a new instance of the VideoSegment datatype.

        Parameters
        ----------
        timestamp:
            Time of the first sample in this segment, in time units.
        samples:
            List of samples contained in this segment.

            At least one sample per segment is guaranteed, and the first sample is always a key frame.

        """

        # You can define your own __init__ function as a member of VideoSegmentExt in video_segment_ext.py
        self.__attrs_init__(timestamp=timestamp, samples=samples)

    timestamp: datatypes.UInt64 = field(converter=_video_segment__timestamp__special_field_converter_override)
    # Time of the first sample in this segment, in time units.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    samples: list[datatypes.VideoSample] = field()
    # List of samples contained in this segment.
    #
    # At least one sample per segment is guaranteed, and the first sample is always a key frame.
    #
    # (Docstring intentionally commented out to hide this field from the docs)


VideoSegmentLike = VideoSegment
VideoSegmentArrayLike = Union[
    VideoSegment,
    Sequence[VideoSegmentLike],
]


class VideoSegmentType(BaseExtensionType):
    _TYPE_NAME: str = "rerun.datatypes.VideoSegment"

    def __init__(self) -> None:
        pa.ExtensionType.__init__(
            self,
            pa.struct([
                pa.field("timestamp", pa.uint64(), nullable=False, metadata={}),
                pa.field(
                    "samples",
                    pa.list_(
                        pa.field(
                            "item",
                            pa.struct([
                                pa.field("timestamp", pa.uint64(), nullable=False, metadata={}),
                                pa.field("byte_offset", pa.uint32(), nullable=False, metadata={}),
                                pa.field("byte_length", pa.uint32(), nullable=False, metadata={}),
                            ]),
                            nullable=False,
                            metadata={},
                        )
                    ),
                    nullable=False,
                    metadata={},
                ),
            ]),
            self._TYPE_NAME,
        )


class VideoSegmentBatch(BaseBatch[VideoSegmentArrayLike]):
    _ARROW_TYPE = VideoSegmentType()

    @staticmethod
    def _native_to_pa_array(data: VideoSegmentArrayLike, data_type: pa.DataType) -> pa.Array:
        raise NotImplementedError(
            "Arrow serialization of VideoSegment not implemented: We lack codegen for arrow-serialization of general structs"
        )  # You need to implement native_to_pa_array_override in video_segment_ext.py
