# DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/store/re_types/definitions/rerun/datatypes/video.fbs".

# You can extend this class by creating a "VideoExt" class in "video_ext.py".

from __future__ import annotations

from typing import Any, Sequence, Union

import numpy as np
import numpy.typing as npt
import pyarrow as pa
from attrs import define, field

from .. import datatypes
from .._baseclasses import (
    BaseBatch,
    BaseExtensionType,
)
from .._converters import (
    to_np_uint8,
)

__all__ = ["Video", "VideoArrayLike", "VideoBatch", "VideoLike", "VideoType"]


def _video__timescale__special_field_converter_override(x: datatypes.UInt64Like) -> datatypes.UInt64:
    if isinstance(x, datatypes.UInt64):
        return x
    else:
        return datatypes.UInt64(x)


def _video__duration__special_field_converter_override(x: datatypes.UInt64Like) -> datatypes.UInt64:
    if isinstance(x, datatypes.UInt64):
        return x
    else:
        return datatypes.UInt64(x)


@define(init=False)
class Video:
    """**Datatype**: Minimal video container format."""

    def __init__(
        self: Any,
        config: datatypes.VideoConfigLike,
        timescale: datatypes.UInt64Like,
        duration: datatypes.UInt64Like,
        segments: datatypes.VideoSegmentArrayLike,
        data: npt.ArrayLike,
    ):
        """
        Create a new instance of the Video datatype.

        Parameters
        ----------
        config:
            The config for this video.
        timescale:
            Number of time units per second.
        duration:
            Duration of the video in time units.
        segments:
            Video is split into segments.

            Each segment begins with a key frame, followed by any number of delta frames.
        data:
            Raw video data.

        """

        # You can define your own __init__ function as a member of VideoExt in video_ext.py
        self.__attrs_init__(config=config, timescale=timescale, duration=duration, segments=segments, data=data)

    config: datatypes.VideoConfig = field()
    # The config for this video.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    timescale: datatypes.UInt64 = field(converter=_video__timescale__special_field_converter_override)
    # Number of time units per second.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    duration: datatypes.UInt64 = field(converter=_video__duration__special_field_converter_override)
    # Duration of the video in time units.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    segments: list[datatypes.VideoSegment] = field()
    # Video is split into segments.
    #
    # Each segment begins with a key frame, followed by any number of delta frames.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    data: npt.NDArray[np.uint8] = field(converter=to_np_uint8)
    # Raw video data.
    #
    # (Docstring intentionally commented out to hide this field from the docs)


VideoLike = Video
VideoArrayLike = Union[
    Video,
    Sequence[VideoLike],
]


class VideoType(BaseExtensionType):
    _TYPE_NAME: str = "rerun.datatypes.Video"

    def __init__(self) -> None:
        pa.ExtensionType.__init__(
            self,
            pa.struct([
                pa.field(
                    "config",
                    pa.struct([
                        pa.field("codec", pa.utf8(), nullable=False, metadata={}),
                        pa.field("coded_height", pa.uint16(), nullable=False, metadata={}),
                        pa.field("coded_width", pa.uint16(), nullable=False, metadata={}),
                        pa.field(
                            "description",
                            pa.list_(pa.field("item", pa.uint8(), nullable=False, metadata={})),
                            nullable=False,
                            metadata={},
                        ),
                    ]),
                    nullable=False,
                    metadata={},
                ),
                pa.field("timescale", pa.uint64(), nullable=False, metadata={}),
                pa.field("duration", pa.uint64(), nullable=False, metadata={}),
                pa.field(
                    "segments",
                    pa.list_(
                        pa.field(
                            "item",
                            pa.struct([
                                pa.field("timestamp", pa.uint64(), nullable=False, metadata={}),
                                pa.field(
                                    "samples",
                                    pa.list_(
                                        pa.field(
                                            "item",
                                            pa.struct([
                                                pa.field("timestamp", pa.uint64(), nullable=False, metadata={}),
                                                pa.field("byte_offset", pa.uint32(), nullable=False, metadata={}),
                                                pa.field("byte_length", pa.uint32(), nullable=False, metadata={}),
                                            ]),
                                            nullable=False,
                                            metadata={},
                                        )
                                    ),
                                    nullable=False,
                                    metadata={},
                                ),
                            ]),
                            nullable=False,
                            metadata={},
                        )
                    ),
                    nullable=False,
                    metadata={},
                ),
                pa.field(
                    "data",
                    pa.list_(pa.field("item", pa.uint8(), nullable=False, metadata={})),
                    nullable=False,
                    metadata={},
                ),
            ]),
            self._TYPE_NAME,
        )


class VideoBatch(BaseBatch[VideoArrayLike]):
    _ARROW_TYPE = VideoType()

    @staticmethod
    def _native_to_pa_array(data: VideoArrayLike, data_type: pa.DataType) -> pa.Array:
        raise NotImplementedError(
            "Arrow serialization of Video not implemented: We lack codegen for arrow-serialization of general structs"
        )  # You need to implement native_to_pa_array_override in video_ext.py
