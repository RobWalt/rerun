// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/datatypes/video.fbs".

#pragma once

#include "../collection.hpp"
#include "../result.hpp"
#include "uint64.hpp"
#include "video_config.hpp"
#include "video_segment.hpp"

#include <cstdint>
#include <memory>

namespace arrow {
    class Array;
    class DataType;
    class StructBuilder;
} // namespace arrow

namespace rerun::datatypes {
    /// **Datatype**: Minimal video container format.
    struct Video {
        /// The config for this video.
        rerun::datatypes::VideoConfig config;

        /// Number of time units per second.
        rerun::datatypes::UInt64 timescale;

        /// Duration of the video in time units.
        rerun::datatypes::UInt64 duration;

        /// Video is split into segments.
        ///
        /// Each segment begins with a key frame, followed by any number of delta frames.
        rerun::Collection<rerun::datatypes::VideoSegment> segments;

        /// Raw video data.
        rerun::Collection<uint8_t> data;

      public:
        Video() = default;
    };
} // namespace rerun::datatypes

namespace rerun {
    template <typename T>
    struct Loggable;

    /// \private
    template <>
    struct Loggable<datatypes::Video> {
        static constexpr const char Name[] = "rerun.datatypes.Video";

        /// Returns the arrow data type this type corresponds to.
        static const std::shared_ptr<arrow::DataType>& arrow_datatype();

        /// Serializes an array of `rerun::datatypes::Video` into an arrow array.
        static Result<std::shared_ptr<arrow::Array>> to_arrow(
            const datatypes::Video* instances, size_t num_instances
        );

        /// Fills an arrow array builder with an array of this type.
        static rerun::Error fill_arrow_array_builder(
            arrow::StructBuilder* builder, const datatypes::Video* elements, size_t num_elements
        );
    };
} // namespace rerun
