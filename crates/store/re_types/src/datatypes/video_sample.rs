// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/rust/api.rs
// Based on "crates/store/re_types/definitions/rerun/datatypes/video.fbs".

#![allow(unused_imports)]
#![allow(unused_parens)]
#![allow(clippy::clone_on_copy)]
#![allow(clippy::cloned_instead_of_copied)]
#![allow(clippy::map_flatten)]
#![allow(clippy::needless_question_mark)]
#![allow(clippy::new_without_default)]
#![allow(clippy::redundant_closure)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::too_many_lines)]

use ::re_types_core::external::arrow2;
use ::re_types_core::ComponentName;
use ::re_types_core::SerializationResult;
use ::re_types_core::{ComponentBatch, MaybeOwnedComponentBatch};
use ::re_types_core::{DeserializationError, DeserializationResult};

/// **Datatype**: A video sample.
///
/// Similar to a frame of video, but decoding a full frame typically requires more than one sample.
///
/// Samples can either be key frames or delta frames. Only key frames have enough data to decode a full frame,
/// delta frames always require the context of a key frame and possibly also some number of preceding delta
/// frames to decode a full frame.
///
/// The type of a given sample is implicit in its position in the [`datatypes::VideoSegment`][crate::datatypes::VideoSegment] it belongs to,
/// where the first sample is always a key frame.
#[derive(Clone, Debug, Default)]
pub struct VideoSample {
    /// Time at which this sample appears, in time units.
    pub timestamp: crate::datatypes::UInt64,

    /// Offset into video data.
    pub byte_offset: crate::datatypes::UInt32,

    /// Length of the sample starting at the sample's byte offset.
    pub byte_length: crate::datatypes::UInt32,
}

impl ::re_types_core::SizeBytes for VideoSample {
    #[inline]
    fn heap_size_bytes(&self) -> u64 {
        self.timestamp.heap_size_bytes()
            + self.byte_offset.heap_size_bytes()
            + self.byte_length.heap_size_bytes()
    }

    #[inline]
    fn is_pod() -> bool {
        <crate::datatypes::UInt64>::is_pod()
            && <crate::datatypes::UInt32>::is_pod()
            && <crate::datatypes::UInt32>::is_pod()
    }
}

::re_types_core::macros::impl_into_cow!(VideoSample);

impl ::re_types_core::Loggable for VideoSample {
    type Name = ::re_types_core::DatatypeName;

    #[inline]
    fn name() -> Self::Name {
        "rerun.datatypes.VideoSample".into()
    }

    #[inline]
    fn arrow_datatype() -> arrow2::datatypes::DataType {
        #![allow(clippy::wildcard_imports)]
        use arrow2::datatypes::*;
        DataType::Struct(std::sync::Arc::new(vec![
            Field::new(
                "timestamp",
                <crate::datatypes::UInt64>::arrow_datatype(),
                false,
            ),
            Field::new(
                "byte_offset",
                <crate::datatypes::UInt32>::arrow_datatype(),
                false,
            ),
            Field::new(
                "byte_length",
                <crate::datatypes::UInt32>::arrow_datatype(),
                false,
            ),
        ]))
    }

    fn to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
    ) -> SerializationResult<Box<dyn arrow2::array::Array>>
    where
        Self: Clone + 'a,
    {
        #![allow(clippy::wildcard_imports)]
        use ::re_types_core::{Loggable as _, ResultExt as _};
        use arrow2::{array::*, datatypes::*};
        Ok({
            let (somes, data): (Vec<_>, Vec<_>) = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    (datum.is_some(), datum)
                })
                .unzip();
            let bitmap: Option<arrow2::bitmap::Bitmap> = {
                let any_nones = somes.iter().any(|some| !*some);
                any_nones.then(|| somes.into())
            };
            StructArray::new(
                Self::arrow_datatype(),
                vec![
                    {
                        let (somes, timestamp): (Vec<_>, Vec<_>) = data
                            .iter()
                            .map(|datum| {
                                let datum = datum.as_ref().map(|datum| datum.timestamp.clone());
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let timestamp_bitmap: Option<arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        PrimitiveArray::new(
                            DataType::UInt64,
                            timestamp
                                .into_iter()
                                .map(|datum| datum.map(|datum| datum.0).unwrap_or_default())
                                .collect(),
                            timestamp_bitmap,
                        )
                        .boxed()
                    },
                    {
                        let (somes, byte_offset): (Vec<_>, Vec<_>) = data
                            .iter()
                            .map(|datum| {
                                let datum = datum.as_ref().map(|datum| datum.byte_offset.clone());
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let byte_offset_bitmap: Option<arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        PrimitiveArray::new(
                            DataType::UInt32,
                            byte_offset
                                .into_iter()
                                .map(|datum| datum.map(|datum| datum.0).unwrap_or_default())
                                .collect(),
                            byte_offset_bitmap,
                        )
                        .boxed()
                    },
                    {
                        let (somes, byte_length): (Vec<_>, Vec<_>) = data
                            .iter()
                            .map(|datum| {
                                let datum = datum.as_ref().map(|datum| datum.byte_length.clone());
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let byte_length_bitmap: Option<arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        PrimitiveArray::new(
                            DataType::UInt32,
                            byte_length
                                .into_iter()
                                .map(|datum| datum.map(|datum| datum.0).unwrap_or_default())
                                .collect(),
                            byte_length_bitmap,
                        )
                        .boxed()
                    },
                ],
                bitmap,
            )
            .boxed()
        })
    }

    fn from_arrow_opt(
        arrow_data: &dyn arrow2::array::Array,
    ) -> DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        #![allow(clippy::wildcard_imports)]
        use ::re_types_core::{Loggable as _, ResultExt as _};
        use arrow2::{array::*, buffer::*, datatypes::*};
        Ok({
            let arrow_data = arrow_data
                .as_any()
                .downcast_ref::<arrow2::array::StructArray>()
                .ok_or_else(|| {
                    let expected = Self::arrow_datatype();
                    let actual = arrow_data.data_type().clone();
                    DeserializationError::datatype_mismatch(expected, actual)
                })
                .with_context("rerun.datatypes.VideoSample")?;
            if arrow_data.is_empty() {
                Vec::new()
            } else {
                let (arrow_data_fields, arrow_data_arrays) =
                    (arrow_data.fields(), arrow_data.values());
                let arrays_by_name: ::std::collections::HashMap<_, _> = arrow_data_fields
                    .iter()
                    .map(|field| field.name.as_str())
                    .zip(arrow_data_arrays)
                    .collect();
                let timestamp = {
                    if !arrays_by_name.contains_key("timestamp") {
                        return Err(DeserializationError::missing_struct_field(
                            Self::arrow_datatype(),
                            "timestamp",
                        ))
                        .with_context("rerun.datatypes.VideoSample");
                    }
                    let arrow_data = &**arrays_by_name["timestamp"];
                    arrow_data
                        .as_any()
                        .downcast_ref::<UInt64Array>()
                        .ok_or_else(|| {
                            let expected = DataType::UInt64;
                            let actual = arrow_data.data_type().clone();
                            DeserializationError::datatype_mismatch(expected, actual)
                        })
                        .with_context("rerun.datatypes.VideoSample#timestamp")?
                        .into_iter()
                        .map(|opt| opt.copied())
                        .map(|res_or_opt| res_or_opt.map(crate::datatypes::UInt64))
                };
                let byte_offset = {
                    if !arrays_by_name.contains_key("byte_offset") {
                        return Err(DeserializationError::missing_struct_field(
                            Self::arrow_datatype(),
                            "byte_offset",
                        ))
                        .with_context("rerun.datatypes.VideoSample");
                    }
                    let arrow_data = &**arrays_by_name["byte_offset"];
                    arrow_data
                        .as_any()
                        .downcast_ref::<UInt32Array>()
                        .ok_or_else(|| {
                            let expected = DataType::UInt32;
                            let actual = arrow_data.data_type().clone();
                            DeserializationError::datatype_mismatch(expected, actual)
                        })
                        .with_context("rerun.datatypes.VideoSample#byte_offset")?
                        .into_iter()
                        .map(|opt| opt.copied())
                        .map(|res_or_opt| res_or_opt.map(crate::datatypes::UInt32))
                };
                let byte_length = {
                    if !arrays_by_name.contains_key("byte_length") {
                        return Err(DeserializationError::missing_struct_field(
                            Self::arrow_datatype(),
                            "byte_length",
                        ))
                        .with_context("rerun.datatypes.VideoSample");
                    }
                    let arrow_data = &**arrays_by_name["byte_length"];
                    arrow_data
                        .as_any()
                        .downcast_ref::<UInt32Array>()
                        .ok_or_else(|| {
                            let expected = DataType::UInt32;
                            let actual = arrow_data.data_type().clone();
                            DeserializationError::datatype_mismatch(expected, actual)
                        })
                        .with_context("rerun.datatypes.VideoSample#byte_length")?
                        .into_iter()
                        .map(|opt| opt.copied())
                        .map(|res_or_opt| res_or_opt.map(crate::datatypes::UInt32))
                };
                arrow2::bitmap::utils::ZipValidity::new_with_validity(
                    ::itertools::izip!(timestamp, byte_offset, byte_length),
                    arrow_data.validity(),
                )
                .map(|opt| {
                    opt.map(|(timestamp, byte_offset, byte_length)| {
                        Ok(Self {
                            timestamp: timestamp
                                .ok_or_else(DeserializationError::missing_data)
                                .with_context("rerun.datatypes.VideoSample#timestamp")?,
                            byte_offset: byte_offset
                                .ok_or_else(DeserializationError::missing_data)
                                .with_context("rerun.datatypes.VideoSample#byte_offset")?,
                            byte_length: byte_length
                                .ok_or_else(DeserializationError::missing_data)
                                .with_context("rerun.datatypes.VideoSample#byte_length")?,
                        })
                    })
                    .transpose()
                })
                .collect::<DeserializationResult<Vec<_>>>()
                .with_context("rerun.datatypes.VideoSample")?
            }
        })
    }
}
