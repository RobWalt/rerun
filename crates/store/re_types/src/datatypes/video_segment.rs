// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/rust/api.rs
// Based on "crates/store/re_types/definitions/rerun/datatypes/video.fbs".

#![allow(unused_imports)]
#![allow(unused_parens)]
#![allow(clippy::clone_on_copy)]
#![allow(clippy::cloned_instead_of_copied)]
#![allow(clippy::map_flatten)]
#![allow(clippy::needless_question_mark)]
#![allow(clippy::new_without_default)]
#![allow(clippy::redundant_closure)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::too_many_lines)]

use ::re_types_core::external::arrow2;
use ::re_types_core::ComponentName;
use ::re_types_core::SerializationResult;
use ::re_types_core::{ComponentBatch, MaybeOwnedComponentBatch};
use ::re_types_core::{DeserializationError, DeserializationResult};

/// **Datatype**: A segment of video made up of one or more samples, always starts with a key frame.
#[derive(Clone, Debug, Default)]
pub struct VideoSegment {
    /// Time of the first sample in this segment, in time units.
    pub timestamp: crate::datatypes::UInt64,

    /// List of samples contained in this segment.
    ///
    /// At least one sample per segment is guaranteed, and the first sample is always a key frame.
    pub samples: Vec<crate::datatypes::VideoSample>,
}

impl ::re_types_core::SizeBytes for VideoSegment {
    #[inline]
    fn heap_size_bytes(&self) -> u64 {
        self.timestamp.heap_size_bytes() + self.samples.heap_size_bytes()
    }

    #[inline]
    fn is_pod() -> bool {
        <crate::datatypes::UInt64>::is_pod() && <Vec<crate::datatypes::VideoSample>>::is_pod()
    }
}

::re_types_core::macros::impl_into_cow!(VideoSegment);

impl ::re_types_core::Loggable for VideoSegment {
    type Name = ::re_types_core::DatatypeName;

    #[inline]
    fn name() -> Self::Name {
        "rerun.datatypes.VideoSegment".into()
    }

    #[inline]
    fn arrow_datatype() -> arrow2::datatypes::DataType {
        #![allow(clippy::wildcard_imports)]
        use arrow2::datatypes::*;
        DataType::Struct(std::sync::Arc::new(vec![
            Field::new(
                "timestamp",
                <crate::datatypes::UInt64>::arrow_datatype(),
                false,
            ),
            Field::new(
                "samples",
                DataType::List(std::sync::Arc::new(Field::new(
                    "item",
                    <crate::datatypes::VideoSample>::arrow_datatype(),
                    false,
                ))),
                false,
            ),
        ]))
    }

    fn to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
    ) -> SerializationResult<Box<dyn arrow2::array::Array>>
    where
        Self: Clone + 'a,
    {
        #![allow(clippy::wildcard_imports)]
        use ::re_types_core::{Loggable as _, ResultExt as _};
        use arrow2::{array::*, datatypes::*};
        Ok({
            let (somes, data): (Vec<_>, Vec<_>) = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    (datum.is_some(), datum)
                })
                .unzip();
            let bitmap: Option<arrow2::bitmap::Bitmap> = {
                let any_nones = somes.iter().any(|some| !*some);
                any_nones.then(|| somes.into())
            };
            StructArray::new(
                Self::arrow_datatype(),
                vec![
                    {
                        let (somes, timestamp): (Vec<_>, Vec<_>) = data
                            .iter()
                            .map(|datum| {
                                let datum = datum.as_ref().map(|datum| datum.timestamp.clone());
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let timestamp_bitmap: Option<arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        PrimitiveArray::new(
                            DataType::UInt64,
                            timestamp
                                .into_iter()
                                .map(|datum| datum.map(|datum| datum.0).unwrap_or_default())
                                .collect(),
                            timestamp_bitmap,
                        )
                        .boxed()
                    },
                    {
                        let (somes, samples): (Vec<_>, Vec<_>) = data
                            .iter()
                            .map(|datum| {
                                let datum = datum.as_ref().map(|datum| datum.samples.clone());
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let samples_bitmap: Option<arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        {
                            use arrow2::{buffer::Buffer, offset::OffsetsBuffer};
                            let offsets = arrow2::offset::Offsets::<i32>::try_from_lengths(
                                samples
                                    .iter()
                                    .map(|opt| opt.as_ref().map_or(0, |datum| datum.len())),
                            )?
                            .into();
                            let samples_inner_data: Vec<_> =
                                samples.into_iter().flatten().flatten().collect();
                            let samples_inner_bitmap: Option<arrow2::bitmap::Bitmap> = None;
                            ListArray::try_new(
                                DataType::List(std::sync::Arc::new(Field::new(
                                    "item",
                                    <crate::datatypes::VideoSample>::arrow_datatype(),
                                    false,
                                ))),
                                offsets,
                                {
                                    _ = samples_inner_bitmap;
                                    crate::datatypes::VideoSample::to_arrow_opt(
                                        samples_inner_data.into_iter().map(Some),
                                    )?
                                },
                                samples_bitmap,
                            )?
                            .boxed()
                        }
                    },
                ],
                bitmap,
            )
            .boxed()
        })
    }

    fn from_arrow_opt(
        arrow_data: &dyn arrow2::array::Array,
    ) -> DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        #![allow(clippy::wildcard_imports)]
        use ::re_types_core::{Loggable as _, ResultExt as _};
        use arrow2::{array::*, buffer::*, datatypes::*};
        Ok({
            let arrow_data = arrow_data
                .as_any()
                .downcast_ref::<arrow2::array::StructArray>()
                .ok_or_else(|| {
                    let expected = Self::arrow_datatype();
                    let actual = arrow_data.data_type().clone();
                    DeserializationError::datatype_mismatch(expected, actual)
                })
                .with_context("rerun.datatypes.VideoSegment")?;
            if arrow_data.is_empty() {
                Vec::new()
            } else {
                let (arrow_data_fields, arrow_data_arrays) =
                    (arrow_data.fields(), arrow_data.values());
                let arrays_by_name: ::std::collections::HashMap<_, _> = arrow_data_fields
                    .iter()
                    .map(|field| field.name.as_str())
                    .zip(arrow_data_arrays)
                    .collect();
                let timestamp = {
                    if !arrays_by_name.contains_key("timestamp") {
                        return Err(DeserializationError::missing_struct_field(
                            Self::arrow_datatype(),
                            "timestamp",
                        ))
                        .with_context("rerun.datatypes.VideoSegment");
                    }
                    let arrow_data = &**arrays_by_name["timestamp"];
                    arrow_data
                        .as_any()
                        .downcast_ref::<UInt64Array>()
                        .ok_or_else(|| {
                            let expected = DataType::UInt64;
                            let actual = arrow_data.data_type().clone();
                            DeserializationError::datatype_mismatch(expected, actual)
                        })
                        .with_context("rerun.datatypes.VideoSegment#timestamp")?
                        .into_iter()
                        .map(|opt| opt.copied())
                        .map(|res_or_opt| res_or_opt.map(crate::datatypes::UInt64))
                };
                let samples = {
                    if !arrays_by_name.contains_key("samples") {
                        return Err(DeserializationError::missing_struct_field(
                            Self::arrow_datatype(),
                            "samples",
                        ))
                        .with_context("rerun.datatypes.VideoSegment");
                    }
                    let arrow_data = &**arrays_by_name["samples"];
                    {
                        let arrow_data = arrow_data
                            .as_any()
                            .downcast_ref::<arrow2::array::ListArray<i32>>()
                            .ok_or_else(|| {
                                let expected = DataType::List(std::sync::Arc::new(Field::new(
                                    "item",
                                    <crate::datatypes::VideoSample>::arrow_datatype(),
                                    false,
                                )));
                                let actual = arrow_data.data_type().clone();
                                DeserializationError::datatype_mismatch(expected, actual)
                            })
                            .with_context("rerun.datatypes.VideoSegment#samples")?;
                        if arrow_data.is_empty() {
                            Vec::new()
                        } else {
                            let arrow_data_inner = {
                                let arrow_data_inner = &**arrow_data.values();
                                crate::datatypes::VideoSample::from_arrow_opt(arrow_data_inner)
                                    .with_context("rerun.datatypes.VideoSegment#samples")?
                                    .into_iter()
                                    .collect::<Vec<_>>()
                            };
                            let offsets = arrow_data.offsets();
                            arrow2::bitmap::utils::ZipValidity::new_with_validity(
                                offsets.iter().zip(offsets.lengths()),
                                arrow_data.validity(),
                            )
                            .map(|elem| {
                                elem.map(|(start, len)| {
                                    let start = *start as usize;
                                    let end = start + len;
                                    if end > arrow_data_inner.len() {
                                        return Err(DeserializationError::offset_slice_oob(
                                            (start, end),
                                            arrow_data_inner.len(),
                                        ));
                                    }

                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    let data =
                                        unsafe { arrow_data_inner.get_unchecked(start..end) };
                                    let data = data
                                        .iter()
                                        .cloned()
                                        .map(Option::unwrap_or_default)
                                        .collect();
                                    Ok(data)
                                })
                                .transpose()
                            })
                            .collect::<DeserializationResult<Vec<Option<_>>>>()?
                        }
                        .into_iter()
                    }
                };
                arrow2::bitmap::utils::ZipValidity::new_with_validity(
                    ::itertools::izip!(timestamp, samples),
                    arrow_data.validity(),
                )
                .map(|opt| {
                    opt.map(|(timestamp, samples)| {
                        Ok(Self {
                            timestamp: timestamp
                                .ok_or_else(DeserializationError::missing_data)
                                .with_context("rerun.datatypes.VideoSegment#timestamp")?,
                            samples: samples
                                .ok_or_else(DeserializationError::missing_data)
                                .with_context("rerun.datatypes.VideoSegment#samples")?,
                        })
                    })
                    .transpose()
                })
                .collect::<DeserializationResult<Vec<_>>>()
                .with_context("rerun.datatypes.VideoSegment")?
            }
        })
    }
}
